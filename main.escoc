-- This does not type check because it lacks a whnf

inconsistent
: {P : Type} P
= inconsistent

-- Identity

the
: {A : Type} {u : A} A
= [A] [u] u

-- The empty, uninhabited type

Empty
: {self : (Empty self)} Type
= [self]
  {Prop : {self : (Empty self)} Type}
  (Prop self)

-- The unit type

Unit
: {self : (Unit self)} Type
= [self]
  {Prop : {self : (Unit self)} Type}
  {new  : (Prop Unit.new)}
  (Prop self)

Unit.new
: (Unit Unit.new)
= [Prop] [new] new

-- The booleans true and false

Bool
: {self  : (Bool self)} Type
= [self]
  {Prop  : {self : (Bool self)} Type}
  {true  : (Prop Bool.true)}
  {false : (Prop Bool.false)}
  (Prop self)

Bool.true
: (Bool Bool.true)
= [Prop] [true] [false] true

Bool.false
: (Bool Bool.false)
= [Prop] [true] [false] false

Bool.induct
: {self  : (Bool self)}
  {Prop  : {self : (Bool self)} Type}
  {true  : (Prop Bool.true)}
  {false : (Prop Bool.false)}
  (Prop self)
= [self] [Prop] [true] [false]
  (self Prop true false)

Bool.not
: {self : (Bool self)} (Bool (Bool.not self))
= [self]
  (self
    [self](Bool (Bool.not self))
    Bool.false
    Bool.true)

-- Natural numbers

Nat
: {self : (Nat self)} Type
= [self]
  {Prop  : {self : (Nat self)} Type}
  {succ  : {pred : (Nat pred)} (Prop (Nat.succ pred))}
  {zero  : (Prop Nat.zero)}
  (Prop self)

Nat.succ
: {pred : (Nat pred)} (Nat (Nat.succ pred))
= [pred] [Nat.] [succ.] [zero.]
  (succ. pred)

Nat.zero
: (Nat Nat.zero)
= [Nat.] [succ.] [zero.] zero.

Nat.0 : (Nat Nat.0) = Nat.zero
Nat.1 : (Nat Nat.1) = (Nat.succ Nat.0)
Nat.2 : (Nat Nat.2) = (Nat.succ Nat.1)
Nat.3 : (Nat Nat.3) = (Nat.succ Nat.2)
Nat.4 : (Nat Nat.4) = (Nat.succ Nat.3)
Nat.5 : (Nat Nat.5) = (Nat.succ Nat.4)
Nat.6 : (Nat Nat.6) = (Nat.succ Nat.5)
Nat.7 : (Nat Nat.7) = (Nat.succ Nat.6)
Nat.8 : (Nat Nat.8) = (Nat.succ Nat.7)
Nat.9 : (Nat Nat.9) = (Nat.succ Nat.8)

Nat.id
: {a : (Nat a)} (Nat (Nat.id a))
= [a]
  (a [a] (Nat (Nat.id a))
    [pred : (Nat pred)] (Nat.succ (Nat.id pred))
    Nat.zero)

Nat.same
: {a : (Nat a)} (Nat (Nat.same a))
= [a] [Prop] [succ] [zero]
  (a [a] (Prop (Nat.same a))
    [pred : (Nat pred)] (succ (Nat.same pred))
    zero)

Nat.double
: {n : (Nat n)} (Nat (Nat.double n))
= [n]
  (n [n] (Nat (Nat.double n))
    [pred : (Nat pred)] (Nat.succ (Nat.succ (Nat.double pred)))
    Nat.zero)

Nat.add
: {a : (Nat a)} {b : (Nat b)} (Nat (Nat.add a b))
= [a] [b]
  (a [a] (Nat (Nat.add a b))
    [~a : (Nat ~a)] (Nat.succ (Nat.add ~a b))
    b)

-- Equality on self-referential types

Eq
: {T    : {self : (T self)} Type}
  {a    : (T a)}
  {b    : (T b)}
  {self : (Eq T a b self)}
  Type
= [T] [a] [b] [self]
  {Prop : {b : (T b)} {self : (Eq T a b self)} Type}
  {refl : (Prop a (Eq.refl T a))}
  (Prop b self)

Eq.refl
: {T : {self : (T self)} Type}
  {a : (T a)}
  (Eq T a a (Eq.refl T a))
= [T] [a] [Prop] [refl]
  refl

Eq.sym
: {T : {self : (T self)} Type}
  {a : (T a)}
  {b : (T b)}
  {e : (Eq T a b e)}
  (Eq T b a (Eq.sym T a b e))
= [T] [a] [b] [e]
  (e [b][self](Eq T b a (Eq.sym T a b self))
    (Eq.refl T a))

Eq.cong
: {A : {self : (A self)} Type}
  {B : {self : (B self)} Type}
  {a : (A a)}
  {b : (A b)}
  {e : (Eq A a b e)}
  {f : {a : (A a)} (B (f a))}
  (Eq B (f a) (f b) (Eq.cong A B a b e f))
= [A] [B] [a] [b] [e] [f] 
  (e [b][self](Eq B (f a) (f b) (Eq.cong A B a b self f))
    (Eq.refl B (f a)))

Eq.subst
: {T : {self : (T self)} Type}
  {a : (T a)}
  {b : (T b)}
  {e : (Eq T a b e)}
  {P : {a : (T a)} Type}
  {x : (P a)}
  (P b)
= [T] [a] [b] [e] [P] [x]
  (e [b][self](P b) x)

subst_reduces_example
: (Nat Nat.zero)
= (Eq.subst Nat Nat.zero Nat.zero (Eq.refl Nat Nat.zero) [a : (Nat a)](Nat a) Nat.zero)

add_n_zero
: {n : (Nat n)} (Eq Nat (Nat.add n Nat.zero) n (add_n_zero n))
= [n]
  (n [self](Eq Nat (Nat.add self Nat.zero) self (add_n_zero self))
    [pred : (Nat pred)] (Eq.cong Nat Nat (Nat.add pred Nat.zero) pred (add_n_zero pred) Nat.succ)
    (Eq.refl Nat Nat.zero))

add_n_succ_m
: {n : (Nat n)} {m : (Nat m)} (Eq Nat (Nat.add n (Nat.succ m)) (Nat.succ (Nat.add n m)) (add_n_succ_m n m))
= [N] [M]
  (N
    [self] (Eq Nat (Nat.add self (Nat.succ M)) (Nat.succ (Nat.add self M)) (add_n_succ_m self M))
    [pred : (Nat pred)]
      (Eq.cong
        Nat
        Nat
        (Nat.add pred (Nat.succ M))
        (Nat.succ (Nat.add pred M))
        (add_n_succ_m pred M)
        Nat.succ)
    (Eq.refl Nat (Nat.succ M)))

main
= add_n_succ_m
